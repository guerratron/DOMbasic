{
  "name": "Dombasic",
  "tagline": "PHP pakage to create dynamic DOM elements. Follow the OOP paradigm, implemented SINGLETON patterns, magical methods, contains error control ('own exceptions'), chaining methods, optimized memory and resources, ...",
  "body": "# DOMbasic #\r\n_DOMbasic. Juan José Guerra Haba - 2014 - dinertron@gmail.com  \r\ndombasic-full@lists.osdn.me - dombasic-private@lists.osdn.me_\r\n\r\n## DEFINITION: ##\r\nPHP package to create dynamic __DOM__ elements.  \r\nIt follow the __OOP__ paradigm, implemented __SINGLETON__ patterns, _magical_ methods, contains error control ('own exceptions'), _chaining_ methods, optimized memory and resources, ...  \r\n\r\n## EXPLANATORY: ##\r\nMore flexible and lighter than the native __PHP__. It allows you to create any document labeling: _HTML, XHTML, XML, ..._ \r\nincluding any user-defined (this includes those who are yet to be implemented) that are based on hierarchies of tags, \r\nattributes and content; this You can be achieved simply by modifying the constants file specify, opening and closing \r\ntags and a couple of other modifications.  \r\n\r\nYou can create complete websites that adhere to the standards validation of its structure. A tree harbor the only \r\nvariable element created, this includes visible elements (__BODY__) and invisible (__HEAD__), static (_HTML_) and \r\ndynamic (__SCRIPTS__:. EG _Javascript_), elements and positioning structure (_xHTML_) or style (_CSS_) ...  \r\n\r\nAlthough there are other ways to achieve the same (text variables, other _APIs_, ...) This method is designed for \r\nflexibility and dynamism, performance and low resource consumption.  \r\nOnce you understand the mechanism and its syntax, saving time and effort, errors are minimized and __DOM__ construction \r\nand automated cleaner is achieved.   \r\nWe all know the problems that can be generated when processing a Web page on the fly successive chaining\r\n_'Echo, print, ... \"_ making sure that the headers are not sent in advance; these errors multiplied by a thousand if \r\nwe use Frameworks or type _CMS_ (_Joomla, Wordpress, Drupal, ..._)  \r\n\r\n## FEATURES: ##\r\n  * They have been implemented utility functions that allow us to quickly convert the __DOM__ tree\r\n_JSON_ text, _HTML_, _XML_, ... and vice versa.\r\n  * Maintain tight control 'Exceptions' providing much information when debugging.\r\n  * Classes that follow the __SINGLETON__ pattern.\r\n  * Contains methods 'constructor' and 'destructor' to optimize memory.\r\n  * Methods called magical (_getter, setter, unset, clone, toString, ..._).\r\n  * Configuration file writable for the accommodation of the basic parameters of _INI DOM_.\r\n  * Chaining methods [_NO GETTER_].\r\n  * Programming entirely within the paradigm __OOP__.\r\n  * ... Other utility functions.\r\n\r\n## REQUIREMENTS: ##\r\n * _PHP_ > 4\r\n * The modules that support for reading _INI_, _JSON_ and _XML_ files, must be enabled in __PHP__.\r\n * Having wanted to write code. jejejejj\r\n \r\n## INSTALATION: ##\r\n 1. You do not require installation.  \r\n \r\n   Place the pakage in the desired route by which to call to instructions _'include'_ or _'require'_.  \r\n   _(obviously if it's in a compressed format before DECOMPRESS)_  \r\n  We suggest creating a folder (for example _DOM_) and place it inside. \r\n\r\n## USE: ##\r\n * Load the main input class '_DOM_element_' by 'include' or some variant clause: _include_once, require ..._ by example:  \r\n   `... require(realpath(dirname(__FILE__)).\"/DOM/DOM_element.php\"); ...`  \r\n * After this, to creating __DOM__ elements:  \r\n   `... $div1=new DOM_element('div1'); ...`  \r\n * Add attributes and properties:  \r\n   `... $div1->setTag(\"div\")->id=\"container\"; ...`  \r\n * Add content:  \r\n   `... $div1->setText(\"TEXT INTO 'container' DIV\")->addChild($div2); ...`  \r\n * Print:  \r\n   `... echo $div1->toHTML(); ...`  \r\n\r\n## WEB FLOW CREATION: ##\r\n  * The normal flow for building a Web page would be: DOCTYPE -> HTML (HEAD -> BODY).  \r\n    All this would contain the entire document. (SEE EXAMPLES FOR MORE FULL SHOW)  \r\n\r\n  * DOCUMENT:  \r\n\t  No special labels or attributes element is purely the DOM representation, the element tree, the container document in full:\r\n\t\t  `... $document=new DOM_element('document'); ...`  \r\n\t\t\t`... $document->setTag(''); ...`  \r\n\t\t\t`...   $conf=array( \"TYPE\"=>\"2\", \"DESC\"=>\"\",\r\n\t\t\t\t\t               \"OPEN_TAG_LEFT\"=>\"\", \"OPEN_TAG_RIGHT\"=>\"\", \r\n\t\t\t\t\t               \"CLOSE_TAG_LEFT\"=>\"\", \"CLOSE_TAG_RIGHT\"=>\"\" ); ...`  \r\n\t\t\t`... $document->setConfiguration($conf); ...`  \r\n\r\n  * DOCTYPE:  \r\n\t  This being another special element (it is an element of definition, structure and style), we should also do it using both special \r\n\t\topening tag but no closing and unnamed attributes:  \r\n\t\t  `... $doctype=new DOM_element(\"doctype\"); ...`  \r\n\t\t\t`... $doctype->setTag(\"DOCTYPE\"); ...`  \r\n\t\t\t`... $conf=array( \"TYPE\"=>\"doctype\", \"DESC\"=>\"Tipo de Documento (DTD)\",\r\n\t\t\t\t\t\t\t\t\t\t\t \"OPEN_TAG_LEFT\"=>\"<!\", \"OPEN_TAG_RIGHT\"=>\">\", \r\n\t\t\t\t\t\t\t\t\t\t\t \"CLOSE_TAG_LEFT\"=>\"\", \"CLOSE_TAG_RIGHT\"=>\"\" ); ...`  \r\n\t\t\t`... $doctype->setConfiguration($conf); ...`  \r\n\t\t\t//STARTING A KEY FOR '_null' means an attribute without key (doctype)  \r\n\t\t\t`... $doctype->addAttrib(\"_null1\", \"-//W3C//DTD XHTML 1.0 Transitional//EN\"); ...`  \r\n\t\t\t`... $doctype->_null2=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"; //atributo asignado diréctamente ...`  \r\n\t\t\t_NOTE: Also keep in mind that not harbor any element._  \r\n\r\n  * HTML:  \r\n\t  Container of elements _HEAD_ and _BODY_. Depending on the type of document to create _(HTML 1.0, xHTML, HTML5, ...)_ \r\n\t  will implement those or other parameters:  \r\n\t\t  `... $html=new DOM_element('html'); ...`  \r\n\t\t\t`... $html->setTag(\"html\"); ...`  \r\n\t\t\t`... $html->xmlns=\"http://www.w3.org/1999/xhtml\"; ...`  \r\n\r\n  * HEAD:  \r\n\t  Invisible element of page:  \r\n\t\t  `... $head=new DOM_element('head'); ...`  \r\n\t\t  `... $head->setTag(\"head\")->addChild($title); ...`  \r\n\r\n  * BODY:  \r\n\t\tVisual element of page:  \r\n\t\t  `... $body=new DOM_element('body'); ...`  \r\n\t\t\t`... $body->setTag(\"body\")->addChild($div1); ...`  \r\n\r\n  * SEWING OF ELEMENTS:  \r\n\t  `... $html->setChildren(array($html, $body)); ...`  \r\n\t  `... $document->setChildren(array($doctype, $html)); ...`  \r\n\r\n  * WEB PRINTING:  \r\n\t  `... echo $document->toHTML(); ...`  \r\n\r\n\t_NOTE: (SEE EXAMPLES IN THE 'EXAMPLES' FOLDER FOR A MORE FULL SHOW)_  \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}
